@using ServerManagement.StateStore
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

@if (Server != null)
{
    <MudTd DataLabel="Name">@Server.Name</MudTd>
    <MudTd DataLabel="City">@Server.City</MudTd>
    <MudTd DataLabel="Status">@(Server.IsOnline ? "online" : "offline")</MudTd>

    <MudTd DataLabel="People Online">
        @if (Server.IsOnline)
        {
            Random random = new Random();
            int randomNumber = random.Next(0, 500);
            <MudText Typo="Typo.body2">@randomNumber</MudText>
        }
        else
        {
            <MudText Typo="Typo.body2">N/A</MudText>
        }
    </MudTd>

    <MudTd>
        @if (Server.IsOnline)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@( () => {SetServerStatus(false);})">Turn Off</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@( () => {SetServerStatus(true);})">Turn On</MudButton>
        }
        &nbsp;
        <MudLink Href=@("/servers/" + Server.ServerId) Class="btn-link">Edit</MudLink>
    </MudTd>

    <MudTd>
        <EditForm Model="@Server"
                  FormName=@($"form-server-{Server.ServerId}")
                  OnValidSubmit="@( () => { DeleteServer(Server.ServerId);})">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Delete</MudButton>
        </EditForm>
    </MudTd>
}


@code {
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersEFCoreRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers", true);
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgrey";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default: return "white";
            }
        }
        return "white";
    }

    private void SetServerStatus(bool status)
    {
        if (this.Server is not null)
        {
            if (this.Server.IsOnline != status && this.Server.City is not null)
            {
                if (this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
                {
                    int num = TorontoOnlineServersStore.GetNumberServerOnline();
                    if (status) TorontoOnlineServersStore.SetNumbersServersOnline(num + 1);
                    else if (num > 0) TorontoOnlineServersStore.SetNumbersServersOnline(num - 1);
                }
                this.Server.IsOnline = status;
                ServersEFCoreRepository.UpdateServer(this.Server.ServerId, Server);
            }
        }
    }
}