@inject IServersEFCoreRepository ServersEFCoreRepository

<MudTable Items="@servers" Hover="true" SortLabel="Sort By" Striped="true">

    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Server, object>(x=>(x.Name!=null)?x.Name:String.Empty)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<Server, object>(x=>(x.City!=null)?x.City:String.Empty)">City</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Server, object>(x=>x.IsOnline)">Status</MudTableSortLabel></MudTh>
        <MudTh>People Online</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <ServerComponent Server="@context"></ServerComponent>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 15, 25 }" />
    </PagerContent>

</MudTable>

@code {
    [Parameter]
    public string? CityName { get; set; }

    [Parameter]
    public string? ServerFilter { get; set; }

    private List<Server>? servers;

    private System.Threading.Timer? Timer;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != CityName)
            {
                base.SetParametersAsync(parameters);
            }
        }

        if (parameters.TryGetValue<string>("ServerFilter", out var serverFilter))
        {
            if (serverFilter != ServerFilter)
            {
                base.SetParametersAsync(parameters);
            }
        }
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(this.ServerFilter))
        {
            this.servers = ServersEFCoreRepository.GetServersByCity(this.CityName ?? "Toronto");
        }
        else
        {
            this.servers = ServersEFCoreRepository.SearchServers(this.ServerFilter ?? "");
            this.CityName = string.Empty;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            //Init here
            if (string.IsNullOrWhiteSpace(this.ServerFilter))
            {
                this.servers = ServersEFCoreRepository.GetServersByCity(this.CityName ?? "Toronto");
            }
            else
            {
                this.servers = ServersEFCoreRepository.SearchServers(this.ServerFilter ?? "");
                this.CityName = string.Empty;
            }
            StateHasChanged();

            Timer = new System.Threading.Timer(
                _ =>
                {
                    base.InvokeAsync(StateHasChanged);
                }, null, 2000, 2000);
        }
    }
}
