@using ServerManagement.StateStore
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@implements IDisposable


<MudItem xs="12" sm="6" md="4" lg="3" xl="2" Class="d-flex">
    <MudCard Class="@(SelectedCity.Equals(City, StringComparison.OrdinalIgnoreCase)?selectedMudCardClass:unselectMudCardClass)">
        <MudImage Src="@($"/images/{City}.png")" Alt="City Image" Elevation="0" Class="align-content-center rounded-lg" Height="200" Width="200" />
        <MudCardContent Class="align-content-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@( () => {SelectCity(City);})">@City</MudButton>
            @if (City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
            {
                <MudText Typo="Typo.body2" Class="mt-1 d-grid justify-content-center">Online: @numberServersOnlineToronto</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudItem>


@code {
    [Parameter]
    public string SelectedCity { get; set; } = "Toronto";

    [Parameter]
    public string City { get; set; } = "";

    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }

    private string selectedMudCardClass = "border border-solid mud-border-primary ma-2 align-items-center object-contain";
    private string unselectMudCardClass = "ma-2 align-items-center object-contain";

    private int numberServersOnlineToronto;

    private void SelectCity(string cityName)
    {
        SelectCityCallback.InvokeAsync(cityName);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServerOnline();
            TorontoOnlineServersStore.AddStateChangeListeners(OnServersStatusChange);
            StateHasChanged();
        }
    }

    private void OnServersStatusChange()
    {
        numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServerOnline();
        StateHasChanged();
    }

    public void Dispose()
    {
        TorontoOnlineServersStore.RemoveStateChangeListeners(OnServersStatusChange);
    }

}
