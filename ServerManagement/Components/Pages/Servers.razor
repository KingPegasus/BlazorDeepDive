@page "/servers"
@page "/servers/back_from/{cityName}"
@using ServerManagement.StateStore

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

<PageTitle>Servers</PageTitle>

<MudPaper Class="pt-3 mx-2 mt-2 mb-4" Elevation="0">
    <MudText Typo="Typo.h3">Servers</MudText>
</MudPaper>

<CityListComponent @ref="cityListComponent"
                   SelectCityCallback="HandleCitySelection"
                   selectedCity="@selectedCity"></CityListComponent>
<br />

<SearchBarComponent @ref="searchBarComponent" SearchServerCallback="HandleSearchServer"
                    style="width:500px"></SearchBarComponent>
<br />

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent @rendermode="InteractiveServer"
                         CityName="@selectedCity"
                         ServerFilter="@serverFilter"></ServerListComponent>
</CascadingValue>
<br />

<MudButton Href="/servername" Variant="Variant.Filled" Color="Color.Primary">Add Server</MudButton>
<br />
<br />

@code {
    [Parameter]
    public string? CityName { get; set; }

    public string selectedCity { get; set; } = "Toronto";
    public string serverFilter { get; set; } = String.Empty;

    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    private void HandleCitySelection(string cityName)
    {
        this.serverFilter = string.Empty;
        this.selectedCity = cityName;
        searchBarComponent?.ClearFilter();
    }

    private void HandleSearchServer(string serverFilter)
    {
        this.selectedCity = string.Empty;
        this.serverFilter = serverFilter;
        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from")
            && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }

            var serversToronto = ServersEFCoreRepository.GetServersByCity("Toronto");
            if (serversToronto is not null)
            {
                TorontoOnlineServersStore.SetNumbersServersOnline(serversToronto.Count(x => x.IsOnline));
            }
        }
    }
}
