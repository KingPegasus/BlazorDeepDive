@page "/servers/{id:int}"

@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<NavigationLock 
    OnBeforeInternalNavigation="OnBeforeInternalNavigation"
    ConfirmExternalNavigation="true"></NavigationLock>
<h3>Edit Server</h3>
<br />

@if (server != null)
{

    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
       <DataAnnotationsValidator></DataAnnotationsValidator>
       <ValidationSummary></ValidationSummary>
        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>
        <br />
        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        <a href="/servers" class="btn btn-primary">Close</a>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; } // Should match but case insensitive

    [SupplyParameterFromForm(FormName = "formServer")]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServersRepository.GetServerById(this.Id);
        // ??= means only populate if server is null

    }

    private void Submit()
    {
        if(server != null)
        {
            ServersRepository.UpdateServer(server.ServerId, this.server);
            NavigationManager.NavigateTo("/servers");
        }
    }
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var IsConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you confirm you wan to leave this page?");
        if (!IsConfirmed)
        {
            context.PreventNavigation();
        }
    }
}
  